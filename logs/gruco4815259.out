Loaded module: python3/3.6.2
Loaded module: cuda/8.0
Loaded module: cudnn/v7.0-prod-cuda8
Running script...
##converting Controller to cuda-enabled
1000/10000
Arch ['ReLU', 32, 2, 32]
acc tensor(0.8543)
loss tensor(1.3132, device='cuda:0', grad_fn=<NegBackward>)

2000/10000
Arch [2, 'ReLU', 32]
acc tensor(0.8744)
loss tensor(1.6423, device='cuda:0', grad_fn=<NegBackward>)

3000/10000
Arch [64, 'ReLU', 64, 'ReLU']
acc tensor(0.9799)
loss tensor(1.8396, device='cuda:0', grad_fn=<NegBackward>)

4000/10000
Arch [4, 'Tanh']
acc tensor(0.8643)
loss tensor(-0.2670, device='cuda:0', grad_fn=<NegBackward>)

5000/10000
Arch [64, 32, 64]
acc tensor(0.8643)
loss tensor(1.1644, device='cuda:0', grad_fn=<NegBackward>)

6000/10000
Arch [64, 'Tanh', 4, 'Sigmoid']
acc tensor(0.9799)
loss tensor(1.2962, device='cuda:0', grad_fn=<NegBackward>)

7000/10000
Arch [64, 4, 64]
acc tensor(0.8643)
loss tensor(1.2784, device='cuda:0', grad_fn=<NegBackward>)

8000/10000
Arch [64, 4, 'ReLU', 4]
acc tensor(0.8643)
loss tensor(1.3872, device='cuda:0', grad_fn=<NegBackward>)

9000/10000
Arch [64, 'ReLU', 'ReLU']
acc tensor(0.9749)
loss tensor(0.7593, device='cuda:0', grad_fn=<NegBackward>)

10000/10000
Arch [64, 'Tanh', 2]
acc tensor(0.9799)
loss tensor(1.3020, device='cuda:0', grad_fn=<NegBackward>)

##converting Controller to cuda-enabled
1000/10000
Arch [8, 'Tanh', 'Tanh']
acc tensor(0.7675)
loss tensor(0.5769, device='cuda:0', grad_fn=<NegBackward>)

2000/10000
Arch [16, 'Tanh', 'Tanh']
acc tensor(0.8056)
loss tensor(0.5079, device='cuda:0', grad_fn=<NegBackward>)

3000/10000
Arch ['Tanh', 'Tanh', 'Tanh']
acc tensor(0.8377)
loss tensor(0.2916, device='cuda:0', grad_fn=<NegBackward>)

4000/10000
Arch [32, 'Tanh', 'Tanh']
acc tensor(0.8257)
loss tensor(0.5193, device='cuda:0', grad_fn=<NegBackward>)

5000/10000
Arch ['Tanh', 'Tanh', 'Tanh', 16]
acc tensor(0.8236)
loss tensor(0.6596, device='cuda:0', grad_fn=<NegBackward>)

6000/10000
Arch [32, 'Tanh', 'Tanh', 'Sigmoid']
acc tensor(0.8096)
loss tensor(0.6959, device='cuda:0', grad_fn=<NegBackward>)

7000/10000
Arch ['Tanh', 8, 'Tanh']
acc tensor(0.7896)
loss tensor(0.8926, device='cuda:0', grad_fn=<NegBackward>)

8000/10000
Arch ['ReLU', 'Tanh', 'Tanh']
acc tensor(0.8317)
loss tensor(0.4106, device='cuda:0', grad_fn=<NegBackward>)

9000/10000
Arch ['Tanh', 'Tanh', 'Tanh']
acc tensor(0.8397)
loss tensor(0.2701, device='cuda:0', grad_fn=<NegBackward>)

10000/10000
Arch ['ReLU', 'Tanh', 'Tanh']
acc tensor(0.8337)
loss tensor(0.4053, device='cuda:0', grad_fn=<NegBackward>)


------------------------------------------------------------
Sender: LSF System <lsfadmin@n-62-20-11>
Subject: Job 4815259: <myJob> in cluster <dcc> Done

Job <myJob> was submitted from host <gbarlogin2> by user <s174007> in cluster <dcc> at Sun Dec  1 16:43:16 2019
Job was executed on host(s) <n-62-20-11>, in queue <gpuv100>, as user <s174007> in cluster <dcc> at Sun Dec  1 16:43:17 2019
</zhome/b0/b/127184> was used as the home directory.
</zhome/b0/b/127184/Documents/Projects/AutoML/scripts> was used as the working directory.
Started at Sun Dec  1 16:43:17 2019
Terminated at Sun Dec  1 20:01:33 2019
Results reported at Sun Dec  1 20:01:33 2019

Your job looked like:

------------------------------------------------------------
# LSBATCH: User input
#!/bin/sh
#BSUB -q gpuv100
#BSUB -gpu "num=1"
#BSUB -J myJob
#BSUB -n 1
#BSUB -W 10:00
#BSUB -R "rusage[mem=6GB]"
#BSUB -o ../logs/gruco%J.out

module load python3/3.6.2
module load cuda/8.0
module load cudnn/v7.0-prod-cuda8

echo "Running script..."
python3 train.py 10000 MOONS 0.01 gcct
python3 train.py 10000 MNIST 0.01 gcct

------------------------------------------------------------

Successfully completed.

Resource usage summary:

    CPU time :                                   11864.99 sec.
    Max Memory :                                 1880 MB
    Average Memory :                             1862.77 MB
    Total Requested Memory :                     6144.00 MB
    Delta Memory :                               4264.00 MB
    Max Swap :                                   -
    Max Processes :                              4
    Max Threads :                                10
    Run time :                                   11905 sec.
    Turnaround time :                            11897 sec.

The output (if any) is above this job summary.

